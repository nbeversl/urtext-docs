Pointers          

By preceding a link to a node with two right angle brackets instead of one, you can extend trees beyond the file level to create node relationships spanning many files. In addition to being a hyperlink, this connects the targeted node, and all of its subchildren, as descendants of the node containing the Pointer:

    | Example Child Node Using a Node Pointer >>001 

The example Pointer above becomes a child of this node, visible in the | Table of Contents >e5j or using the other tree views described in | Trees >w8u.

The advantages to Node Pointers include:
    - The tree represents a hierachy of actual content, rather than the files containing the content.
    - The tree permits nesting both within and beyond file level.
    - The tree can be displayed from any arbitrary starting point, whether or not its branches are within or beyond a particular file.

{ Duplicate Pointers 
    
    Node Pointers may point more than once to the same node, so that content can be reused or referenced across multiple trees within the same project.
    Here is the same example child node from above: | Example Child Node Using a Node Pointer >>001 
    Note that it appears twice in the Table of Contents, once as a child of this node and once as a child of this node's parent node ( | Pointers >lmu).
    00t}

{  Recursive Node Pointers

    If the tree of a Node Pointer includes one of its own ancestors, the tree will stop at the recursion point with the indication `! RECURSION -` before the node title and link. For example, this Node Pointer points to the parent of this node (| Recursive Node Pointers >6ct),  | Pointers >>lmu. You can see the recursion point in the table of contents.

    Note that if you view the tree with another node selected as root, one full iteration will still appear, with the point of recursion falling elsewhere. The tree below is turned "inside out", with | Pointers >lmu as root. 
       
        [[ ID(>01n) +(id=lmu) DEPTH(*) HEADER(Example Recursive Node Tree)  FORMAT(indent:3)]]
        (See | Trees >w8u for how to generate trees like this in dynamic nodes.)

    		{
			Example Recursive Node Tree
			Pointers >lmu
			├── Example Child Node Using a Node Pointer >001
			├── Duplicate Pointers >00t
			│   └── Example Child Node Using a Node Pointer >001
			└── Recursive Node Pointers >6ct
			    ├── ! RECURSION - (from alias) : Pointers >lmu
			    └── Example Recursive Node Tree >01n
			def::>6ct; ID::01n; }
    6ct}

ID::lmu