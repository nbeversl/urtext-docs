Collections

Collections are for "collecting" metadata entries, along with their context, in order to gain a "view" into the text content of a project. A common use for this would be to create a timeline from datetimestamps. Another use would be to collect all metadata entries of a given key, and optionally a given value, into a single view. 

[[   ID(>aoq)
     +(*) <- In order to return anything, we must include some nodes in the query. Here we have included all nodes.
     COLLECT(id=*)
     HEADER(Example Collection)
     FOOTER(flags::exclude_from_toc | exclude_from_export )
     LIMIT(10)
     ]]

{ Example Collection
id :: 001 >001:40 
 Example Child Node Using a Node Pointer


id :: 002 >002:185 
 Since you can navigate entirely from within files, Urtext works great in Sublime's Distraction Free Mode. View -> Enter Distraction Free Mode


id :: 003 >003:158 
 ssss


id :: 004 >004:1264 
 For all purposes in Urtext, inline nodes' identity is unique from their containing file, parent nodes, and child nodes.


id :: 005 >005:319 
 Urtext also utilizes a "loose" parsing of inline timestamps, meaning they can be placed anywhere and will be recognized and parsed.


id :: 006 >006:2333 
 - Version control (Git, for example).


id :: 00e >00e:22 
 Example Inline Node


id :: 00j >00j:84 
 | Pointers >lmu


id :: 00k >00k:353 
 Collections are for "collecting" metadata entries, along with their context, in order to gain a "view" into the text content of a project. A common use for this would be to create a timeline from datetimestamps. Another use would be to collect all metadata entries of a given key, and optionally a given value, into a single view.


id :: 00l >00l:795 
 This node now has special reserved metadata keys that will be parsed as follows:


flags::exclude_from_toc | exclude_from_export 
def::>00k
ID::aoq }



id::00k; 