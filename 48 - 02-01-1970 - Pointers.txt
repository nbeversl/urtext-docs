Pointers          

By preceding a link to a node with two right angle brackets instead of one, you can extend trees beyond the file level to create node relationships spanning many files. In addition to being a hyperlink, this connects the targeted node, and all of its subchildren, as descendants of the node containing the Pointer:

    | Example Child Node Using a Node Pointer >>001 

The example Pointer above becomes a child of this node, visible in the | Table of Contents >e5j or using the other tree views described in | Trees >00h.

The advantages to Node Pointers are many, including:

    - The tree represents a hierachy of actual content, rather than the files containing the content.

    - The tree permits nesting both within and beyond file level.

    - The tree can be displayed from any arbitrary starting point, whether or not its branches are within or beyond a particular file.

{ Duplicate Pointers 
    
    Node Pointers may point more than once to the same node, so that content can be reused or referenced across multiple trees within the same project:
    
    Here is the same example child node from above: | Example Child Node Using a Node Pointer >>001 


00t}


{  Recursive Node Pointers

    If the tree of a Node Pointer includes to one of its own ancestors, the recursion will not be drawn again if it is already contained in the tree. Instead, the point of recursion will incidate "RECURSION", with a link to the Node ID of the node causing the recursion.

    For example, this Node Pointer points back to the root node of the table of contents: 
        | Urtext  Version: 0.5-alpha  Usage Guide and References >>a5m. 
    Instead of the table of contents being drawn recursively from this node, you can see the recursion point in the table of contents.

    Note that if you view the entire tree with another node selected as root, one full iteration will still appear, with the point of recursion falling elsewhere in the tree. Below is the Table of Contents with | Pointers >lmu as root. 


{           Example Recursive Node Tree
          Pointers >lmu
          def::>6ct
          ID::01n
}

    [[ ID(>01n) +(id=lmu) DEPTH(*) HEADER(Example Recursive Node Tree)  FORMAT(indent:10)]]

   
    See | Dynamic Definitions >87g for more information on how to generate trees like this in dynamic nodes.
    6ct}

ID::lmu