
Web / HTTP(S) 

        HTTP(S) links are recognized automatically and will open in the default browser.    
        Example: pressing Ctrl/Command-Shift-/ on this line below will open the link: http://github.com

Reserved Keys 

      There are two reserved keys that Urtext interprets in a special way:
`index`   
    
         Provides a way to give nodes a sort order in "The Node Browser".  Indexed nodes will sort before (above) the others, lowest numbers appearing first. To utilize, add a two-digit sort index (00-99) to a node, such as:  
         You can give the same index number to multiple nodes; in this case they sort first by index, then by timestamped, newest first.

         Unindexed nodes will display underneath indexed nodes, by timestamp, newest first.
`_flags`  

           Used to set node behavior for specific purposes withing Urtext. At present only the following exists:
`exclude_from_tree`  

               Excludes a node from being included in a tree. For an example, see Example 2 in "Dynamic Nodes" "Example 2 : Tree". For more on tree, see [ MISSING LINK : 00h ]
`exclude_from_export` 

                Excludes a node from being exported, when project content is exported. See "Exporting".

Case-sensitivity  

      -   Values are not case-sensitive, except those with the following keys:

          `title`             Manually overrides the node's title. 

          The rest are used only in the project_settings node (see "project_settings") :

          `timestamp_format`  
          `filenames`         
          `project_title`
          `timezone`
          `timestamp_format`

Uses for inline nodes, tags::todo
     
    such as adding comments/edits, tracking anchors and pointers in documents.  
    Also that the title is the first line of text.

     ia5

Example Compact Node
Example inline node within the compact node.

Syntax and Format   

      Text between two angled brackets () is parsed as a timestamp.  To insert the current date and time anywhere, press Control-Shift-t: 

      Timestamps are read and written utilizing Python's `strftime` directives. The following formats are included by default:

          ``` # (<- for info about this marker see "Pass Markers and Embedded Syntaxes" )
          
          # Sat., Sep. 12, 2020, 09:35 AM
          '%a., %b. %d, %Y, %I:%M %p'           
          
          # September 12, 2020
          '%B %-d, %Y' 
          
          # September 2020
          '%B %Y'
          
          # 09-12-2020
          '%m-%d-%Y'
          
          # Sat., Sep. 12, 2020, 09:35 AM '
          '%a., %b. %d, %Y, %I:%M %p %z' 
          
          # Sat., Sep. 12, 2020, 09:35 AM'
          '%a., %b. %d, %Y, %I:%M %p'
          
          # Saturday, September 12, 2020, 09:35 AM'
          '%A, %B %d, %Y, %I:%M %p'
          
          # 'September 12, 2020, 09:35 AM'
          '%B %d, %Y, %I:%M %p'
          
          # 'September 12, 2020, 09:35AM'
          '%B %d, %Y, %I:%M%p'
          
          # 2020
          '%Y'
          
          # September 12, 2020'
          '%B %d, %Y'
          
          # Saturday, September 12, 2020, 09:35AM
          '%A, %B %d, %Y, %I:%M%p'

      ``` 

      Additional formats can be added in the "project_settings" node.

Duplicate Pointers  
    
    Node Pointers may point more than once to the same node, so that content can be reused or referenced across multiple trees within the same project:
    
    Here is the same example child node from above: Example Child Node Using a Node Pointer


iPhone/iPad/iOS  
	
	Urtext can run on iOS using Pythonista. While it does not provide the elegant UI of Sublime Text, it can be set up to meet the project criteria described in[ MISSING LINK : 008 ] , including the requirement that the content wholly reside on every device and not depend on an internet connection.

	Pythonista can import and manipulate files directly in iCloud Drive. However, iCloud Drive does not always sync folder changes in the background, and/or syncs the file list without syncing full file contents. This makes it necessary to open the iOS Files app in order manually trigger a sync before using the Urtext project. In the event one or more files is missing or different among devices, these differences will propogate to dynamic nodes with wrong, stale, or missing information. When this occurs many times, file version conflicts develop.

	A cleaner solution using Dropbox is possible using the Synchronator module (https://github.com/markhamilton1/Synchronator). This module provides a route to automate explicit bidirectional syncing directly between Dropbox and Pythonista environment on demand, such as whenever the project is being used. The module is complicated to install.
Synchronator Setup   

		DOCUMENTATION COMING
Syncing manually comes with the drawback that changes made on the iOS device will not themselves sync to Dropbox in the background. For instance, if changes are made to a file on iOS while not connected to the internet and Pythonista, the project will have to be explictly synced at a later time. So there remains the possibility that projects will get out of sync.

Metadata
Syntax 

  Every node can have an unlimited number of metadata entries. Metadata gets indexed and becomes searchable and sortable from anywhere within the project. Metadata entries also "remember" their location in the text, making them operate as contextual markers. Other than a few reserved key/value pairs, metadata keynames and values are user-defined.  

  Metadata is structured in double-colon-separated key/value pairs, with the value (to the right of the colon) containing an optional timestamp. Examples:

        
        

  Keys must be single words, with characters such as dash and underscore allowed. Values may include spaces. Terminate metadata entries using either a new line or a semicolon to separate them from other text or other metadata entries. Using the semicolon, several entries may be strung together on a single line:

       
      
  Note that a timestamp anywhere in the value will be indexed as the timestamp for the whole metadata entry. If more than on timestamp appears in an entry, only the first one is indexed.
Applying Metadata to Children and Descendants  

  
  To apply metadata to all immediate children of a node, precede the key name immediately with an asterisk (`*`):
*example::todo
  
          {
This node will have the value `todo` for the `example` key.     ucs
{
So will this one.    fna
Note that the asterisk applies the tag ONLY to the children. To apply the tag also to the outer node, give it a separate entry without an asterisk.
 
      pxp
To apply metadata to all descendants of a node recursively, precede the key name immediately with two asterisks:
{
This node will have the value `todo` for the `example` key.  
          {
So will this one  
            {
And this one.    eq5
ep2
6r4
**example::todo
         Note that it doesn't matter where in the "parent" node the metadata entry appears. Metadata entries can be placed anywhere in a node, with the same effect.
       
        yoc
Timestamps
Syntax and Format   

      Text between two angled brackets () is parsed as a timestamp.  To insert the current date and time anywhere, press Control-Shift-t: 

      Timestamps are read and written utilizing Python's `strftime` directives. The following formats are included by default:

          ``` # (<- for info about this marker see "Pass Markers and Embedded Syntaxes" )
          
          # Sat., Sep. 12, 2020, 09:35 AM
          '%a., %b. %d, %Y, %I:%M %p'           
          
          # September 12, 2020
          '%B %-d, %Y' 
          
          # September 2020
          '%B %Y'
          
          # 09-12-2020
          '%m-%d-%Y'
          
          # Sat., Sep. 12, 2020, 09:35 AM '
          '%a., %b. %d, %Y, %I:%M %p %z' 
          
          # Sat., Sep. 12, 2020, 09:35 AM'
          '%a., %b. %d, %Y, %I:%M %p'
          
          # Saturday, September 12, 2020, 09:35 AM'
          '%A, %B %d, %Y, %I:%M %p'
          
          # 'September 12, 2020, 09:35 AM'
          '%B %d, %Y, %I:%M %p'
          
          # 'September 12, 2020, 09:35AM'
          '%B %d, %Y, %I:%M%p'
          
          # 2020
          '%Y'
          
          # September 12, 2020'
          '%B %d, %Y'
          
          # Saturday, September 12, 2020, 09:35AM
          '%A, %B %d, %Y, %I:%M%p'

      ``` 

      Additional formats can be added in the "project_settings" node.
Node timestamps are part of metadata (see "Metadata"). 
      Urtext also utilizes a "loose" parsing of inline timestamps, meaning they can be placed anywhere and will be recognized and parsed.
Tracking Node Dates and Times    

      Reliance on the operating system's "created" or "modified" date metadata is avoided entirely in Urtext, since these values can be easily and inadvertently overwritten during ordinary file system operations, such as copying and moving files/folders. Instead, new nodes  receive by default a "timestamp" metadata key when created:
Time Zones 	  

  	Time zones are not required. If no time zone is present, Coordinated Universal Time (UTC) is added by default  for parsing and comparison purposes. To modify this default, set the `timezone` key in "project_settings" to another valid value.
Case-sensitivity  

      -   Values are not case-sensitive, except those with the following keys:

          `title`             Manually overrides the node's title. 

          The rest are used only in the project_settings node (see "project_settings") :

          `timestamp_format`  
          `filenames`         
          `project_title`
          `timezone`
          `timestamp_format`
Reserved Keys 

      There are two reserved keys that Urtext interprets in a special way:
`index`   
    
         Provides a way to give nodes a sort order in "The Node Browser".  Indexed nodes will sort before (above) the others, lowest numbers appearing first. To utilize, add a two-digit sort index (00-99) to a node, such as:  
         You can give the same index number to multiple nodes; in this case they sort first by index, then by timestamped, newest first.

         Unindexed nodes will display underneath indexed nodes, by timestamp, newest first.
`_flags`  

           Used to set node behavior for specific purposes withing Urtext. At present only the following exists:
`exclude_from_tree`  

               Excludes a node from being included in a tree. For an example, see Example 2 in "Dynamic Nodes" "Example 2 : Tree". For more on tree, see [ MISSING LINK : 00h ]
`exclude_from_export` 

                Excludes a node from being exported, when project content is exported. See "Exporting".

Using Multiple Projects at a Time

To use multiple projects at once, there is a project context manager. When you initially pass a path to Urtext, it looks recursively in all sub folders for additional projects. If it finds a compilable Urtext project in any one, it adds these to the context manager.  You can then freely switch among projects, either explicitly, or using links between the projects (described below). When switching projects, all Urtext's features, content and behavior, including links, compiling, and all functions linked to UI buttons, will operate in the context of the selected project. 

You can put all your Urtext projects into sub folders of a single path. Alternatively, you may put them anyplace in the file system and choose as your Urtext root a folder that encompasses them all. Compiling may take longer if Urtext has to search through many unused directories. 

Using Python, it is possible to only instantiate a single project, without the context manager. The current implementations in Sublime and Pythonista, however, use the context manager by default, even if you are only using a single project.

Recall that what defines a project is a folder. This is also what separates it from other projects. If you add other Urtext project folders into the initial path, they will all be accessible from the same project list.

To switch between projects in Sublime, select Urtext: Select Project from the command palette.
In Pythonista, use "Switch Projects" from the feature menu.
Project Naming (Identification) 

Unlike nodes, projects are uniquely identified by name. For this reason, each project must have an unique name within the running instance of Urtext. Projects can be named using the project_title key in the project's project_settings node. If no name is present, the project's name becomes its absolute path in the file system.
Linking Between Projects 

	You may also link from one project to another within the text. To so this, use the following syntax:
	
	=>"name or path of the other project[ MISSING LINK : idj ] 
       (This link is only an example and is non-functioning)

	Following this link will change the project context to the named project and open its specified node.

Inline Nodes                                                                 
	 
The syntax for inline nodes is to wrap the content in curly braces:

  {
Example Inline Node   id::00e
Create an inline nodes with `Ctrl-Shift-squiggly-brace. Inside the inserted double curly braces is a new node with an auto-generated ID.   

To wrap existing content into an inline node, first select the content and use the same keypress.

Nodes can be nested arbitrarily deep inside other nodes, whether the parent node is a file or another inline node. When syntax highlighting is active, inline node wrappers are tinted to showing nesting level:
    
    `
    {
Example first level   
        {
second level  
            {
third level 
                {
fourth level  
                    {
fifth level     
                    5pq
80d
6qj
8fv
y9t
`

Note that every opening doubly curly bracket must be closed in the same file and requires an ID between its opening and closing brackets. The examples above use "Trailing Node IDs". You can also use regular "Metadata" as at the bottom of this file.

Note that nodes at the file level ("File Nodes") do not use curly-braces, as their region boundaries are defined by the file itself.

For all purposes in Urtext, inline nodes' identity is unique from their containing file, parent nodes, and child nodes.    



{
Uses for inline nodes, tags::todo
     
    such as adding comments/edits, tracking anchors and pointers in documents.  
    Also that the title is the first line of text.

     ia5
**flags::keep_syntax
flags::keep_syntax

ID::004
updated::<Thu., Sep. 10, 2020, 05:24 PM>
index::04

Example Child Node Using a Node Pointer

In-Progress / Experimental / Wish List
iPhone/iPad/iOS  
	
	Urtext can run on iOS using Pythonista. While it does not provide the elegant UI of Sublime Text, it can be set up to meet the project criteria described in[ MISSING LINK : 008 ] , including the requirement that the content wholly reside on every device and not depend on an internet connection.

	Pythonista can import and manipulate files directly in iCloud Drive. However, iCloud Drive does not always sync folder changes in the background, and/or syncs the file list without syncing full file contents. This makes it necessary to open the iOS Files app in order manually trigger a sync before using the Urtext project. In the event one or more files is missing or different among devices, these differences will propogate to dynamic nodes with wrong, stale, or missing information. When this occurs many times, file version conflicts develop.

	A cleaner solution using Dropbox is possible using the Synchronator module (https://github.com/markhamilton1/Synchronator). This module provides a route to automate explicit bidirectional syncing directly between Dropbox and Pythonista environment on demand, such as whenever the project is being used. The module is complicated to install.
Synchronator Setup   

		DOCUMENTATION COMING
Syncing manually comes with the drawback that changes made on the iOS device will not themselves sync to Dropbox in the background. For instance, if changes are made to a file on iOS while not connected to the internet and Pythonista, the project will have to be explictly synced at a later time. So there remains the possibility that projects will get out of sync.
Import/Export to/from: Markdown, HTML, pure plain text, JSON

This node is just here as a destination from the node pointer in  Syntax Quick-ReferenceThis node is just here as a destination from the node pointer in "Syntax Quick-Reference"
Note it has the `exclude_from_tree` flag, which prevents it from showing up in the table of contents.

{
This node will have the value `todo` for the `example` key.  
          {
So will this one  
            {
And this one.    eq5
ep2
6r4
**example::todo
         Note that it doesn't matter where in the "parent" node the metadata entry appears. Metadata entries can be placed anywhere in a node, with the same effect.
       
        yoc

Built-in Metadata Keys  

	There are some built-in metadata keys. Built-in keys begin with an underscore character `_`.

	_title  				Overrides the Node Title

	_flags  				Sets node behavior. More info:"`_flags`"

	A few additional keys are reserved, but only for nodes containing project settings. See "project_settings".

defined

Download and Install Dependencies Manually  

                - anytree
                    https://github.com/c0fec0de/anytree
                    The folder needed is `anytree` inside this download; add it to `Sublime Text 3/Lib/python3.3`.
  
                - pytz
                    https://pypi.org/project/pytz/
                    The folder needed is `pytz`; add it to `Sublime Text 3/Lib/python3.3`.

                - six
                    https://pypi.org/project/six/
                    The only FILE needed is `six.py`, nothing else; add this directly to `Sublime Text 3/Lib/python3.3`.

                - urtext 
                    https://github.com/nbeversl/urtext
                    This is Urtext itself. Put the entire folder (`urtext`) into `Sublime Text 3/Lib/python3.3`.

                - fuzzywuzzy 
                    https://github.com/seatgeek/fuzzywuzzy
                    The folder needed is `fuzzywuzzy`; add it to `Sublime Text 3/Lib/python3.3`.
                
                - diff-match-patch
                    The folder needed is `diff_match_patch`; add it to `Sublime Text 3/Lib/python3.3`.
                    https://pypi.org/project/diff-match-patch/

Using/Adding Existing Files 

	Once a folder contains at least one file with a node ID, you can add and use existing plaintext files in the project without any modification. However for most of the benefits of Urtext you must minimally an ID ("Node IDs") in each file.
	
	To do so, select `Urtext : Import Project` from the Sublime Command palette.

    Note the append will occur without a confirmation dialog, so if you are just experimenting with this system, consider making a copy of your file folder so you can revert without having to manually remove the metadata.

Download Dependencies from a Monorepo  

            As a convenience, all of the above depenencies are (for now) maintained in recent versions at https://github.com/nbeversl/urtext_deps, with all files in the path locations described above. You can either download this repository as a .ZIP file and unzip it, or if you want to maintain version control, use:
                 `git clone --recurse-submodules https://github.com/nbeversl/urtext_deps`

            Put the contents of the cloned/unzipped folder (important: not the folder itself) directly into your `Sublime Text 3/Lib/python3.3` folder.

Generating a node ID manually 
If you accidentally delete a Node ID or need to insert one arbitrarily, press Urtext-i.

Quick Start, Guides and Examples  
Installation and Setup (Desktop)

For desktop use (PC/Mac/Linux) Urtext is implemented in Sublime Text.

1. Download Sublime Text. (https://www.sublimetext.com/).

2. Download Urtext and all its dependencies from the monorepo at `https://github.com/nbeversl/urtext_deps`. You can either download this repository as a .ZIP file and unzip it, or if you want to maintain version control, use `git clone --recurse-submodules https://github.com/nbeversl/urtext_deps`. Put the contents of the cloned/unzipped folder (important: not the folder itself) directly into your `Sublime Text 3/Lib/python3.3` folder.

3. Download the Sublime Urtext package at `https://github.com/nbeversl/urtext_sublime`. Place it in your Packages folder (Sublime Text 3/Packages)

4. Clone/download this documentation repository and open its folder in Sublime. It will automatically be read as an Urtext project.

Once the Sublime package is installed, it will always look for any files with the .txt extension in open folders and attempt to compile them into a project. To open an existing Urtext project, open the folder, a file in the folder, or a Sublime project that includes the folder, and any feature described in this documentation will work.

To make a new project, open an empty folder and select Select `Urtext : Initialize Project` from the Sublime Command Palette. For more information, see "Projects".

See also:

"Sublime Text Interface Tips"

"Using Urtext in iOS with Pythonista"
Syntax Quick-Reference
Basic Syntax 
	```
	
	(<- This "pass marker" causes the Urtext compiler to ignore all Urtext syntax between here and the closing (END) marker, 
	for documentation purposes. For details see "Pass Markers and Embedded Syntaxes")

	
	All text is plain content unless inside a timetamp wrapper or dynamic definition wrapper. 
	The following syntax applies:

	{  }	Subnode	wrappers. Can appear anywhere. Can be nested aribrarily deep.
			More information: "Inline Nodes"

	 >		Link to another node by ID. 
	 		More information: "Links"

	 | 		Placed before a node link, dynamically populates the linked node title.
	 		Example and more info: "Dynamically Titled Links"


	 ^		Compact Node marker. Must be the first non-whitespace character on a line. id::83g
	 		More information: "Compact Nodes"
		
	>>		Node Pointer
	 		Embeds the specified node as though it were included inline using wrappers { } (see above)
	 		More information: "Pointers"

	< > 	Timestamp enclosure. Parses user-defined datetime strings, with some default formats built in.
			Example: <Tue., Jul. 28, 2020, 07:43 PM>
			More information: "Timestamps"

	::		Metadata assignment operator. Accepts a user-defined key on the left, and values and timestamps on the right.
			Metadata may appear anywhere in text.
			Keys must be single words (underscore permitted), values may be any characters, terminated with a semicolon or newline.
			Example: example_key::example value for the key <Tue., Jul. 28, 2020, 73:39 PM>;
			
			The pipe character (`|`) separates multiple values.
			Example: some_key::one value | another value

			Metadata entries are attached in a general way to their containing (parent) node but also remember their 
			location and can serve as an anchor to their immediate context.
			More information: "Metadata"
	
			Trailing node ID:
			The last three characters of a node, if they are preceded by whitespace, can serve as the `id` metadata
			value of that node, to make them less obtrusive while reading/editing text.
			
		```
		flags::keep_syntax; 33j
Built-in Metadata Keys  

	There are some built-in metadata keys. Built-in keys begin with an underscore character `_`.

	_title  				Overrides the Node Title

	_flags  				Sets node behavior. More info:"`_flags`"

	A few additional keys are reserved, but only for nodes containing project settings. See "project_settings".

Dynamic Definitions Quick-Reference

Dynamic definitions contain instructions for dynamically building nodes from the contents of other nodes. They can be written anywhere; it is not necessary to store the definition in the same file to which it refers. (Note that they cannot, however, be stored in the node they target, since they would overwrite themselves.)

Dynamic definitions are wrapped using double left and right square brackets:



	Dynamic Definition Wrapper
		
	Note the dynamic definitions ignore whitespace and arbitrary text outside of functions.
	The order of functions within a definition is unimportant; they are evaluated as a group.

Operations

Built-in operations are bound to either hotkeys or to UI menus.

Hotkeys differ among operating systems and can be reassigned according to your preference by
modifiying

Project Management:

Multiple Projects
Import Project
Reload Project
Reindex All Files
Rename File(s) from Meta
Delete This Node
Initialize Project
Pop Node
Move File to Other Project

Navigation: 

	`h` 	Home  
			Go to the designated home page of the project. Define the home node in "project_settings"

	`` 	Navigate Forward 
			Go to the next visited node (web-browser-like navigation)

	`e`		Node List :
			Show a quick search bar of all nodes in the current project

	`*`		Global Node List:
			Show a quick search bar of all nodes in all known projects.

Insertions:

	`t` 	Timestamp:
			Insert a timestamp at the cursor's location, in the project's default format. For setting timestamp format defaults, see "project_settings"

	`i` 	ID:
			Insert an arbitrary (unallocated) Node ID with metadata wrapper at the cursor position.


Editing:
	
	`g`: 	Editing History
			View the editing history for the currently viewed file.
			For more informatino see "File History"
	
	(menu)	Consolidate Metadata
			Consolidates all metadata tags in the node of the current cursor position, into a single wrapper.


Scratch Views
	
Several outputs performed by dynamic definitions (see "Syntax Quick-Reference") can also be written into "scratch" (unsaved) views for temporary use, with the intention of discarding them afterward.

	(menu)	Timeline
	
	`n`		Search:
			See "SEARCH()" in "Syntax Quick-Reference"
	
	(menu)	Interlinks
		
	(menu)	Tree



Sublime Text Only:
	Traverse Mode


Node Access History

Sublime Text Interface Tips  
	
	Here are some tips for best leveraging Sublime's great UI features.
Syntax Highlighting 

		This package comes with a .YML file (`sublime_urtext.sublime_syntax`) defining the Urtext syntax, along with two color schemes that provide syntax highlighting. Syntax highlighting makes everything easier by showing depth of node nesting and dimming certain elements of the syntax. Select the Sixteen (for light) or Monokai (for dark) color schemes in Preferences -> Color Scheme ... 

		Then change to the Urtext syntax by selecting it in View -> Syntax -> Urtext. To avoid having to do this for every file, select View -> Syntax -> Open All with Current Extension As ... -> Urtext. (You can undo this later by repeating the same but selecting Plain Text.)
Hiding Tabs	

			If you prefer a clean, terminal-like view, hide tabs: View -> Hide Tabs
			This preference can also be set on a per-(Sublime)-project basis. See the Sublime documentation.
Hiding Line Numbers  

			For an extra-clean look, hide line numbers by adding:
				
				```
				
				"settings" : {
					 "line_numbers": false,
				},
				
				```

			... to your Sublime project settings file. (Ignore the JSON syntax pass makers above beginning with `%%`
			See "Pass Markers and Embedded Syntaxes" )
Full Screen / Distraction Free Mode  

			Since you can navigate entirely from within files, Urtext works great in Sublime's Distraction Free Mode. View -> Enter Distraction Free Mode.
Disable Prompts for File Reload 

			 Urtext does a lot of writing to files on the fly, often when they are already open. To avoid seeing a dialog every time, add add the following to your Sublime project settings or User Preferences file:
				 ```
				 "settings" : {
					"always_prompt_for_file_reload": false,
				},
				```
Remove Indent Guides  

			Formatting plaintext using tab indentions can look messy if indent guides are on. To turn them off, add to your Sublime project settings file:
			```
			 "settings" : {{ }}
				"draw_indent _guides": false,
			}
			```
Save on Focus Lost  

			Urtext recompiles your project every time a file changes. To make this more automatic, addto your Sublime settings file:
			```
			{ "save_on_focus_lost": true }
			```
Using a Sublime Project for an Urtext Project  
	
			( see https://www.sublimetext.com/docs/3/projects.html )

			You don't need to define a Sublime Project for the Urtext Project, but if you intend to do more than one thing at a time in Sublime, it's convenient to have one; you can then use Select Project -> Quick Switch Project (Ctrl-Super-P) to switch among them.


Example Recursive Node Tree           
          Pointers"Pointers"

Definition keys/values 

        Dynamic definitions accept the following keys:
id   
            - id: 
    
                (required) : In Sublime this will be auto-populated using the shortcut above; however you can also replace it with the ID of another node. For example, if you want the contents to replace an existing node, assign this key the value of that node's ID. If you want it to populate new inline node, create that node and then copy/paste its ID. 

                Note that in order to work, the target node must exist; dynamic definitions do not create their target nodes. 

                


            
             - include:metadata:[AND:|OR:](metadata key):(metadata value(s)): 
    
                Include nodes with this metadata key and value. Keys and values are chained together and separated by the colon (:) as shown above. Multiple values can be chained together with successive colons. The default operator is "OR"; for "AND", chain this indicator as shown before the tag name.  
                



            - exclude:metadata:(tag name):(tag values) 
    
                Exclude nodes with this metadata key and value. Keys and values are strung together and separated by the colon (:) as shown above. To exclude multiple key/value pairs, write multiple lines. Excluding will always supersede including, no matter the order listed in the definition. 
                


 
           - sort:(key):(reverse)
    
                This specifies how to sort the nodes in the dynamically populated node. The key can be any metadata key in the project, including timestamp. If `:reverse` is appended to the end, the sort order will be reversed.
                



            - metadata:(tag name):(value) 
    
                Metadata to add to the dynamically populated node. This can be any metadata, including the reserved title, index and parent keys.
                


    
                Dynamic nodes will always automatically include the metadata key 'defined in' which will point to the node containing its definition.
    

            - tree:(root id) 
    
                (root id) : Populates the node with a tree with the provided node ID as root. For more on trees, see[ MISSING LINK : 00h ] .
                




             - export:(format):(source id)

                Exports the specified source_id to the target id value in the `id` key field, in the specific format.

                (format) : One of `plaintext`, `markdown` or `html`
                (source_id): The source node to export.

                See "Exporting"
tag_all  	

		tag_all:(key):(value):recursive?

		The `tag_all` instruction tags all children of the target node with the key/value pair specified. If `:recursive` is appended, it will tag all descendents, not just the children. This will affect not just existing children/descendants, but all subsequently added ones as well. When the dynamic definition is removed, the tags are removed from the children/descendants. 

		Note that metadata tags do not actually get added to the inline text of the the children/descendants as a result of this instruction, only that they acquire the specified key/value metadata pair for all purposes metadata serves within Urtext.


User Interface Elements  
The Node Browser

Opening the Node List

Ctrl-Shift-E 






In Sublime Text there is also the alternative of using the UI dropdown. Press Control-Shift-E or select "Urtext: Node List" from the Sublime command palette (Shift-Super-P). Here you can find a node by typing part of its title.

In the Node List, nodes are sorted by their time of creation, with most recent first. They can also be sorted by index (see "`index`").

Traverse ModeTraverse Mode   




This feature is currently implemented in Sublime Text only.

    You can navigate a node tree or list of nodes by turning on Traverse mode (Shift-Ctrl-R). This will open another pane next to the one you are currently in. As you navigate the nodeview in the left side with the cursor or mouse, the selected node shows on the right. Use Sublime's Focus Group navigation keys, or the mouse, to switch between left and right panes.
    
    Toggle Traverse Mode off by pressing Shift-Ctrl-R again. The status bar at the bottom of the Sublime window indicates whether Traverse is on or off. 

    Note that if Traverse mode is off, you can also open a link manually (Shift-Ctrl-/) as normal. 

    This feature is not built into Urtext; it is a feature of the Sublime package only.
Word Wrap in Traverse Mode 

        Since Traverse Mode splits the window into two or more panes, it is suggested to set Word Wrap Column to "Auto" in Sublime Settings. This will cause the edited views to wrap correctly no matter the screen or window/pane size, as well as in Sublime's Distraction Free Mode.

        Whenever Traverse Mode is enabled on a view, word wrap for that view is turned off altogether to prevent awkward wrapping of trees. It is restored when Traverse Mode is turned off.


Development
Make Installation Easier  
	
	The way Sublime Text is currently set up, manually installing all the dependency modules is the easiest way to get it set up. Alternatives such as using git subtrees, wrapping each individual dependency in a separate Sublime Package and then making those Packages dependencies of the Urtext Package, etc., all end up involving both more maintenance and more legwork for the end user than just manually installing everything.

	If any developer can suggest a better solution, please submit a pull request.

	Here are some relevant links:

	https://forum.sublimetext.com/t/dependencies-in-package-control-3/14646
	https://packagecontrol.io/docs/dependencies
	
	https://forum.sublimetext.com/t/how-to-add-python-modules-to-sublime-text-3/41558

	There is a method described in this thread which has not been explored yet:
		https://forum.sublimetext.com/t/dependencies-in-package-control-3/14646/5
	Example:
		https://github.com/packagecontrol/requests

Comparison To Other Tools 
        
        Urtext shares some characteristics with markup languages such as Markdown and LaTeX, with the important difference that it is author-facing, rather than reader-facing. Though it can be made to export to HTML, Urtext is not primarily a document conversion or document generation tool. It is rather a tool for writing, connecting and organizing text.
    
        Urtext consolidates content, structure and instructions (scripting) into a single compilable syntax. Although it can link documents or parts of documents together, unlike HTML, there is no additional code or markup "behind" the visible syntax. Everything the interpreter reads is visible to the user at all times.

Example Source Node 3

Example 1 : List    

    Here are four inline nodes with example tags and indexes:
Example Source Node 1
Example Source Node 3
Example Source Node 2
Example Source Node 4
( Note that each of these nodes has the `exclude_from_tree` flag in the metadata, so that they are not included in the Table of Contents. See"`exclude_from_tree`". )

    Here is an example dynamic node definition targeting node ID[ MISSING LINK : 016 ] 

        [ MISSING LINK : 016 ] 

        Here is the compiled node defined by the definition above. Changing the dynamic definition and/or the contents or metadata of the source nodes will update the dynamic node. Saving is necessary to trigger the update.

Node Titles 

	By default, the first non-whitespace line of any node is the node's title.
