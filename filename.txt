
So will this one.

Synchronator Setup   

		DOCUMENTATION COMING

Using Urtext in iOS with Pythonista
 
Urtext can be run on iOS devices using Pythonista, which provides a full Python interpreter inside of iOS. It is available in the iOS App Store.

This implementation utilizes the native iOS user interface to create a basic text editor view, along with buttons bound to Urtext's functions (similar to the keyboard shortcut bindings in Sublime), project navigation funtions, and syntax highlighting matching those found in the Sublime Text implementation. Using iCloud, projects can be synced among iOS devices and other devices (desktops, laptops). Once synced, a copy of the project resides fully on the device and is not dependent on a live data connection (see "Requirements and Features").

To set it up:

    - Install Pythonista (http://omz-software.com/pythonista/)

    - Clone or download the Urtext-Pythonista package (https://github.com/nbeversl/urtext_pythonista).

    - Install all the Python dependencies into your Pythonista environment. The requirements are the same as for Sublime Text ("Dependencies and Installation" )

    - (optional) To enabling launching or switching to Urtext using an app icon, use the Shortcuts app.

Remove Indent Guides  

			Formatting plaintext using tab indentions can look messy if indent guides are on. To turn them off, add to your Sublime project settings file:
			%%-JSON
			 "settings" : 
				"draw_indent_guides": false,
			
			%%-END-JSON

Trailing Node IDs

iPhone/iPad/iOS  
	
	Urtext can run on iOS using Pythonista. While it does not provide the elegant UI of Sublime Text, it can be set up to meet the project criteria described in[ MISSING LINK : 008 ] , including the requirement that the content wholly reside on every device and not depend on an internet connection.

	Pythonista can import and manipulate files directly in iCloud Drive. However, iCloud Drive does not always sync folder changes in the background, and/or syncs the file list without syncing full file contents. This makes it necessary to open the iOS Files app in order manually trigger a sync before using the Urtext project. In the event one or more files is missing or different among devices, these differences will propogate to dynamic nodes with wrong, stale, or missing information. When this occurs many times, file version conflicts develop.

	A cleaner solution using Dropbox is possible using the Synchronator module (https://github.com/markhamilton1/Synchronator). This module provides a route to automate explicit bidirectional syncing directly between Dropbox and Pythonista environment on demand, such as whenever the project is being used. The module is complicated to install.
Synchronator Setup   

		DOCUMENTATION COMING
Syncing manually comes with the drawback that changes made on the iOS device will not themselves sync to Dropbox in the background. For instance, if changes are made to a file on iOS while not connected to the internet and Pythonista, the project will have to be explictly synced at a later time. So there remains the possibility that projects will get out of sync.

Files 
        
		Links to files can be made by writing f> , followed immediately with a file path relative to the folder of the project:
		Example:   f>./README.md

Generating a node ID manually 
If you accidentally delete a Node ID or need to insert one arbitrarily, press Urtext-i.

Traverse ModeTraverse Mode   




This feature is currently implemented in Sublime Text only.

    You can navigate a node tree or list of nodes by turning on Traverse mode (Shift-Ctrl-R). This will open another pane next to the one you are currently in. As you navigate the nodeview in the left side with the cursor or mouse, the selected node shows on the right. Use Sublime's Focus Group navigation keys, or the mouse, to switch between left and right panes.
    
    Toggle Traverse Mode off by pressing Shift-Ctrl-R again. The status bar at the bottom of the Sublime window indicates whether Traverse is on or off. 

    Note that if Traverse mode is off, you can also open a link manually (Shift-Ctrl-/) as normal. 

    This feature is not built into Urtext; it is a feature of the Sublime package only.
Word Wrap in Traverse Mode 

        Since Traverse Mode splits the window into two or more panes, it is suggested to set Word Wrap Column to "Auto" in Sublime Settings. This will cause the edited views to wrap correctly no matter the screen or window/pane size, as well as in Sublime's Distraction Free Mode.

        Whenever Traverse Mode is enabled on a view, word wrap for that view is turned off altogether to prevent awkward wrapping of trees. It is restored when Traverse Mode is turned off.

Dynamically Titled Links  

    Prepending a pipe character to any node link will populate the space between the pipe and link with the node's title, from its metadata or default title. Examples are found throughout this documentation. 

    Titled links are updated at the single file level whenever that file is saved.

In-Progress / Experimental / Wish List
iPhone/iPad/iOS  
	
	Urtext can run on iOS using Pythonista. While it does not provide the elegant UI of Sublime Text, it can be set up to meet the project criteria described in[ MISSING LINK : 008 ] , including the requirement that the content wholly reside on every device and not depend on an internet connection.

	Pythonista can import and manipulate files directly in iCloud Drive. However, iCloud Drive does not always sync folder changes in the background, and/or syncs the file list without syncing full file contents. This makes it necessary to open the iOS Files app in order manually trigger a sync before using the Urtext project. In the event one or more files is missing or different among devices, these differences will propogate to dynamic nodes with wrong, stale, or missing information. When this occurs many times, file version conflicts develop.

	A cleaner solution using Dropbox is possible using the Synchronator module (https://github.com/markhamilton1/Synchronator). This module provides a route to automate explicit bidirectional syncing directly between Dropbox and Pythonista environment on demand, such as whenever the project is being used. The module is complicated to install.
Synchronator Setup   

		DOCUMENTATION COMING
Syncing manually comes with the drawback that changes made on the iOS device will not themselves sync to Dropbox in the background. For instance, if changes are made to a file on iOS while not connected to the internet and Pythonista, the project will have to be explictly synced at a later time. So there remains the possibility that projects will get out of sync.
Import/Export to/from: Markdown, HTML, pure plain text, JSON

""
               ""
               ""
               : -->""
               == Current Projects =="== Current Projects =="
               === Reminders ==="=== Reminders ==="
               About Compact Nodes"About Compact Nodes"
               About Urtext"About Urtext"
               Accidental Duplicate Node IDs"Accidental Duplicate Node IDs"
               And this one."And this one."
               Applying Metadata to Children and Descendants"Applying Metadata to Children and Descendants"
               Basic Syntax"Basic Syntax"
               Built-in Metadata Keys"Built-in Metadata Keys"
               Case-sensitivity"Case-sensitivity"
               Collections"Collections"
               Compact Nodes"Compact Nodes"
               Compact Nodes"Compact Nodes"
               Comparison To Other Tools"Comparison To Other Tools"
               Creating a Dynamic Node"Creating a Dynamic Node"
               Definition keys/values"Definition keys/values"

Lists
""
               ""
               ""
               : -->""
               == Current Projects =="== Current Projects =="
               === Reminders ==="=== Reminders ==="
               About Compact Nodes"About Compact Nodes"
               About Urtext"About Urtext"
               Accidental Duplicate Node IDs"Accidental Duplicate Node IDs"
               And this one."And this one."
               Applying Metadata to Children and Descendants"Applying Metadata to Children and Descendants"
               Basic Syntax"Basic Syntax"
               Built-in Metadata Keys"Built-in Metadata Keys"
               Case-sensitivity"Case-sensitivity"
               Collections"Collections"
               Compact Nodes"Compact Nodes"
               Compact Nodes"Compact Nodes"
               Comparison To Other Tools"Comparison To Other Tools"
               Creating a Dynamic Node"Creating a Dynamic Node"
               Definition keys/values"Definition keys/values"
Note that the at the bottom of the node is the reserved key `def` which refers to the node containing the definition.
: -->""

               -
               : -->""

               -
               : -->""

               -
               : -->""

               -
               == Current Projects ==: -->"== Current Projects =="

               -
"Links" or using "Traverse Mode".


Urtext will parse node timestamps along with inline timestamps into a project timeline. Press Ctrl-Shift-T or select Urtext: Show Timeline in the Sublime command palette. Each node and inline timestamp is shown in chronological order with nearby text. You can try it with this example project, but note that since many nodes in this document are undated, they have a default date of Thu., Jan. 01, 1970, 12:00AM.

As everywhere in a project, node IDs shown are links that can be opened using Ctrl-Shift-/.



You can extend node trees beyond the file level by using "Pointers".

Thanks to the `anytree` module (https://pypi.org/project/anytree/) for the plaintext node tree diagrams.

Uses for inline nodes, 
     
    such as adding comments/edits, tracking anchors and pointers in documents.  
    Also that the title is the first line of text.

Sublime 

        Press Shift-Ctrl-/ on a line containing a link to open the node with the linked ID. If the link is to an inline node, Sublime will scroll to and center its starting point.

Project Naming (Identification) 

Unlike nodes, projects are uniquely identified by name. For this reason, each project must have an unique name within the running instance of Urtext. Projects can be named using the project_title key in the project's project_settings node. If no name is present, the project's name becomes its absolute path in the file system.

Timestamps
Syntax and Format   

      Text between two angled brackets () is parsed as a timestamp.  To insert the current date and time anywhere, press Control-Shift-t: 

      Timestamps are read and written utilizing Python's `strftime` directives. The following formats are included by default:

          %%-PYTHON # (<- for info about this marker see "Pass Markers and Embedded Syntaxes" )

          # Sat., Sep. 12, 2020, 09:35 AM
          '%a., %b. %d, %Y, %I:%M %p' 
          
          # September 12, 2020
          '%B %-d, %Y' 

          # September 2020
          '%B %Y'

          # 09-12-2020
          '%m-%d-%Y'
          
          # Sat., Sep. 12, 2020, 09:35 AM '
          '%a., %b. %d, %Y, %I:%M %p %z' 

          # Sat., Sep. 12, 2020, 09:35 AM'
          '%a., %b. %d, %Y, %I:%M %p'

          # Saturday, September 12, 2020, 09:35 AM'
          '%A, %B %d, %Y, %I:%M %p'

          # 'September 12, 2020, 09:35 AM'
          '%B %d, %Y, %I:%M %p'

          # 'September 12, 2020, 09:35AM'
          '%B %d, %Y, %I:%M%p'

          # 2020
          '%Y'

          # September 12, 2020'
          '%B %d, %Y'

          # Saturday, September 12, 2020, 09:35AM
          '%A, %B %d, %Y, %I:%M%p'

      %%-END-PYTHON 

      Additional formats can be added in the "project_settings" node.
Node timestamps are part of metadata (see "Metadata"). 
      Urtext also utilizes a "loose" parsing of inline timestamps, meaning they can be placed anywhere and will be recognized and parsed.
Tracking Node Dates and Times    

      Reliance on the operating system's "created" or "modified" date metadata is avoided entirely in Urtext, since these values can be easily and inadvertently overwritten during ordinary file system operations, such as copying and moving files/folders. Instead, new nodes  receive by default a "timestamp" metadata key when created:
Time Zones 	  

  	Time zones are not required. If no time zone is present, Coordinated Universal Time (UTC) is added by default  for parsing and comparison purposes. To modify this default, set the `timezone` key in "project_settings" to another valid value.

Requirements and Features   

        Many of the following features and benefits were core requirements when creating Urtext. Others came about indirectly. Though many can be found in other tools, they are not currently found together in one single existing tool; this was the motivation for creating Urtext.

            - It uses plain text files. Plaintext is fast, human-readable, flexible, cross-platform, device-portable, and future-proof.

            - It is usable across multiple platforms and devices.
 
            - Cascading complexity; use only the parts you need. Does not take months/years to learn.

            - Being open source, Urtext is extensible, hackable and customizable to specific needs.

            - It can compile, organize, and link content spread across hundreds or thousands of files. Files and content elements can be linked to one another in tree-like, recursive (tangled), and other non-hierarchical ways.

            - It has customizable and extensible metadata that does not rely on the file system.

            - It is decoupled from any particular text editor or interface ; it can be incorporated into any environment that runs Python, including any scriptable text editor or Python-scriptable environment capable of displaying a text editing view.
               
            - It can incorporate (embed) other plaintext syntaxes, including other markup languages and other programming language syntaxes.
   
            - There is no need to interact directly with the file system (creating, naming, saving, organizing files). File creation, naming and management is handled for you.
      
            - Future-proof. No reliance on anything that may not exist in 5 or 1000 years. Urtext files themselves are in plaintext, which is future-proof. The interpreter/compiler could be implemented in any sufficiently capable language desired, current, past or future.
   
            - Does not depend on a cloud service. Though cloud services can be used to sync project files among devices, the interpreter itself is made to operate locally; content wholly resides on the device being used.

            Being in plaintext and having a syntax specification, it can also be used with:

            - Themes and syntax highlighting.
            - Version control (Git, for example).

: -->""

               -
               : -->""

               -
               : -->""

               -
               : -->""

               -
               == Current Projects ==: -->"== Current Projects =="

               -

Collections

Collections are for "collecting" metadata entries, along with their context, in order to gain a range of views into the text content of a project. A common use for this would be to create a timeline from datetimestamps. Another use would be to collect all metadata entries of a given key, and optionally a given value, into a single view.

Dynamic Nodes

Dynamic definitions contain instructions for dynamically building nodes from the contents of other nodes. Dynamic content remains up to date with its source content at all times. Dynamic definitions contain instructions for dynamically building nodes from the contents of other nodes. They can be written anywhere; it is not necessary to store the definition in the same file to which it refers. (Note that they cannot, however, be stored in the node they target, since they would overwrite themselves.)

The complete parameters and syntax are here : "Dynamic Definitions"

This section illustrates more generally the use and purpose of dynamic nodes, with examples.

There are two main kinds of dynamic output: lists and collections: "Lists" are exactly that: lists of nodes, with each node displayed not more than once once. Lists can optionally expand into trees, showing the hierarchy of nested relationships from each root node in the list. Collections, on the other hand, show metadata entries with their context; the same node may appear many times in a colelction if it contains many metadata entries matching the queried parameters.
Lists
""
               ""
               ""
               : -->""
               == Current Projects =="== Current Projects =="
               === Reminders ==="=== Reminders ==="
               About Compact Nodes"About Compact Nodes"
               About Urtext"About Urtext"
               Accidental Duplicate Node IDs"Accidental Duplicate Node IDs"
               And this one."And this one."
               Applying Metadata to Children and Descendants"Applying Metadata to Children and Descendants"
               Basic Syntax"Basic Syntax"
               Built-in Metadata Keys"Built-in Metadata Keys"
               Case-sensitivity"Case-sensitivity"
               Collections"Collections"
               Compact Nodes"Compact Nodes"
               Compact Nodes"Compact Nodes"
               Comparison To Other Tools"Comparison To Other Tools"
               Creating a Dynamic Node"Creating a Dynamic Node"
               Definition keys/values"Definition keys/values"
Note that the at the bottom of the node is the reserved key `def` which refers to the node containing the definition.
: -->""

               -
               : -->""

               -
               : -->""

               -
               : -->""

               -
               == Current Projects ==: -->"== Current Projects =="

               -
"Links" or using "Traverse Mode".


Urtext will parse node timestamps along with inline timestamps into a project timeline. Press Ctrl-Shift-T or select Urtext: Show Timeline in the Sublime command palette. Each node and inline timestamp is shown in chronological order with nearby text. You can try it with this example project, but note that since many nodes in this document are undated, they have a default date of Thu., Jan. 01, 1970, 12:00AM.

As everywhere in a project, node IDs shown are links that can be opened using Ctrl-Shift-/.



You can extend node trees beyond the file level by using "Pointers".

Thanks to the `anytree` module (https://pypi.org/project/anytree/) for the plaintext node tree diagrams.
Collections

Collections are for "collecting" metadata entries, along with their context, in order to gain a range of views into the text content of a project. A common use for this would be to create a timeline from datetimestamps. Another use would be to collect all metadata entries of a given key, and optionally a given value, into a single view.


Pythonista  

        Use the `/` key when the cursor is on any line containing a link.

Compact Nodes

	For nodes that can fit on a single line, such as items in a list, short phrases, word definitions, and so on, you can use a simplified node syntax. Begin the line with the caret symbol (^); the closing wrapper then becomes the next newline (the end of the same line). Like other nodes:
require an ID
can have arbitrary other metadata
become child nodes of their containing node.
About Compact Nodes 
Compact Nodes"Compact Nodes"
├── require an ID"require an ID"
├── can have arbitrary other metadata"can have arbitrary other metadata"
├── become child nodes of their containing node."become child nodes of their containing node."
└── About Compact Nodes"About Compact Nodes"

Reference: Key Bindings

ctrl+shift+;            New Node
ctrl+shift+e            Node Browser 
ctrl+shift+r            Toggle Traverse Mode
ctrl+shift+s.           Auto rename file from node metadata
ctrl+shift+/            Open node (from an ID on the same line) 
ctrl+shift+super+;      New inline node
ctrl+shift+[            New inline node from selection
ctrl+Et                  Insert timestamp
ctrl+shift+]            New dynamic node definition
ctrl+shift+t            Timeline view
ctrl+shift+-            Align selected lines to the right (120 character width)

Syntax Highlighting 

		This package comes with a .YML file (`sublime_urtext.sublime_syntax`) defining the Urtext syntax, along with two color schemes that provide syntax highlighting. Syntax highlighting makes everything easier by showing depth of node nesting and dimming certain elements of the syntax. Select the Sixteen (for light) or Monokai (for dark) color schemes in Preferences -> Color Scheme ... 

		Then change to the Urtext syntax by selecting it in View -> Syntax -> Urtext. To avoid having to do this for every file, select View -> Syntax -> Open All with Current Extension As ... -> Urtext. (You can undo this later by repeating the same but selecting Plain Text.)

Sublime Text Interface Tips  
	
	Here are some tips for best leveraging Sublime's great UI features.
Syntax Highlighting 

		This package comes with a .YML file (`sublime_urtext.sublime_syntax`) defining the Urtext syntax, along with two color schemes that provide syntax highlighting. Syntax highlighting makes everything easier by showing depth of node nesting and dimming certain elements of the syntax. Select the Sixteen (for light) or Monokai (for dark) color schemes in Preferences -> Color Scheme ... 

		Then change to the Urtext syntax by selecting it in View -> Syntax -> Urtext. To avoid having to do this for every file, select View -> Syntax -> Open All with Current Extension As ... -> Urtext. (You can undo this later by repeating the same but selecting Plain Text.)
Hiding Tabs	

			If you prefer a clean, terminal-like view, hide tabs: View -> Hide Tabs
			This preference can also be set on a per-(Sublime)-project basis. See the Sublime documentation.
Hiding Line Numbers  

			For an extra-clean look, hide line numbers by adding:
				
				%%-JSON
				
				"settings" : 
					 "line_numbers": false,
				,
				
				%%-END-JSON

			... to your Sublime project settings file. (Ignore the JSON syntax pass makers above beginning with `%%`
			See "Pass Markers and Embedded Syntaxes" )
Full Screen / Distraction Free Mode  

			Since you can navigate entirely from within files, Urtext works great in Sublime's Distraction Free Mode. View -> Enter Distraction Free Mode.
Disable Prompts for File Reload 

			 Urtext does a lot of writing to files on the fly, often when they are already open. To avoid seeing a dialog every time, add add the following to your Sublime project settings or User Preferences file:
				 %%-JSON
				 "settings" : 
					"always_prompt_for_file_reload": false,
				,
				%%-END-JSON
Remove Indent Guides  

			Formatting plaintext using tab indentions can look messy if indent guides are on. To turn them off, add to your Sublime project settings file:
			%%-JSON
			 "settings" : 
				"draw_indent_guides": false,
			
			%%-END-JSON
Save on Focus Lost  

			Urtext recompiles your project every time a file changes. To make this more automatic, addto your Sublime settings file:
			%%-JSON
			 "save_on_focus_lost": true 
			%%-END-JSON
Using a Sublime Project for an Urtext Project  
	
			( see https://www.sublimetext.com/docs/3/projects.html )

			You don't need to define a Sublime Project for the Urtext Project, but if you intend to do more than one thing at a time in Sublime, it's convenient to have one; you can then use Select Project -> Quick Switch Project (Ctrl-Super-P) to switch among them.

Hiding Tabs	

			If you prefer a clean, terminal-like view, hide tabs: View -> Hide Tabs
			This preference can also be set on a per-(Sublime)-project basis. See the Sublime documentation.

Basic Syntax 

	%%-DOC (<- This "pass marker" causes the Urtext compiler to ignore all Urtext syntax between here and the closing (END) marker, 
	for documentation purposes. For details see "Pass Markers and Embedded Syntaxes")

	
	All text is plain content unless inside a timetamp wrapper or dynamic definition wrapper. 
	The following syntax applies:

	{  }	Subnode	wrappers. Can appear anywhere. Can be nested aribrarily deep.
			More information: "Inline Nodes"

	"Links"	Link to another node by ID. 
	 		More information: "Links"

	 | 		Placed before a node link, dynamically populates the linked node title.
	 		Example and more info: "Dynamically Titled Links"


	 ^		Compact Node marker. Must be the first non-whitespace character on a line. id::83g
	 		More information: "Compact Nodes"
		
	 This node is just here as a destination from the node pointer in  Urtext Syntax GuideThis node is just here as a destination from the node pointer in "Syntax"
Note it has the `exclude_from_tree` flag, which prevents it from showing up in the table of contents.
	Node Pointer
	 		Embeds the specified node as though it were included inline using wrappers { } (see above)
	 		More information: "Pointers"

	< > 	Timestamp enclosure. Parses user-defined datetime strings, with some default formats built in.
			Example: <Tue., Jul. 28, 2020, 07:43 PM>
			More information: "Timestamps"

	::		Metadata assignment operator. Accepts a user-defined key on the left, and values and timestamps on the right.
			Metadata may appear anywhere in text.
			Keys must be single words (underscore permitted), values may be any characters, terminated with a semicolon or newline.
			Example: example_key::example value for the key <Tue., Jul. 28, 2020, 73:39 PM>;
			
			The pipe character (`|`) separates multiple values.
			Example: some_key::one value | another value

			Metadata entries are attached in a general way to their containing (parent) node but also remember their 
			location and can serve as an anchor to their immediate context.
			More information: "Metadata"
	
			Trailing node ID:
			The last three characters of a node, if they are preceded by whitespace, can serve as the `id` metadata
			value of that node, to make them less obtrusive while reading/editing text.
			
			%%-END-DOC 

			( The following is a trailing node ID that closes the node titled "Basic Syntax" --> ) 
		
		flags::keep_syntax; 33j

Opening Links
Sublime 

        Press Shift-Ctrl-/ on a line containing a link to open the node with the linked ID. If the link is to an inline node, Sublime will scroll to and center its starting point.
Pythonista  

        Use the `/` key when the cursor is on any line containing a link.
Note that Urtext reads node regions on every save, so cursor location may be imprecise if the file has been altered since the last save.

File Nodes

The most basic node is a single file. It may or may not contain other nodes nested inside it.

To create a new file, press `Urtext-;`. A new file is created, named and saved automatically. It has whitespace on top and a metadata block at the bottom containing a node ID and (by default) a creation timestamp.
