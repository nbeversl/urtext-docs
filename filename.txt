
Home Node 

The Home page is accessible anywhere in the project by pressing Ctrl-Shift-H. Specify the node ID you want this shortcut to jump to.

Example first level   
        {
second level  
            {
third level 
                {
fourth level  
                    {
fifth level     
                    5pq
80d
6qj
8fv
y9t

Synchronator Setup   

		DOCUMENTATION COMING

Compact Nodes

	For nodes that can fit on a single line, such as items in a list, short phrases, word definitions, and so on, you can use a simplified node syntax. Begin the line with the caret symbol (^); the closing wrapper then becomes the next newline (the end of the same line). Like other nodes:
require an ID
can have arbitrary other metadata
become child nodes of their containing node.
About Compact Nodes 
Compact Nodes"Compact Nodes"
├── require an ID"require an ID"
├── can have arbitrary other metadata"can have arbitrary other metadata"
├── become child nodes of their containing node."become child nodes of their containing node."
└── About Compact Nodes"About Compact Nodes"

Reserved Keys 

      There are two reserved keys that Urtext interprets in a special way:
`index`   
    
         Provides a way to give nodes a sort order in "The Node Browser".  Indexed nodes will sort before (above) the others, lowest numbers appearing first. To utilize, add a two-digit sort index (00-99) to a node, such as:  
         You can give the same index number to multiple nodes; in this case they sort first by index, then by timestamped, newest first.

         Unindexed nodes will display underneath indexed nodes, by timestamp, newest first.
`_flags`  

           Used to set node behavior for specific purposes withing Urtext. At present only the following exists:
`exclude_from_tree`  

               Excludes a node from being included in a tree. For an example, see Example 2 in "Dynamic Nodes" "Example 2 : Tree". For more on tree, see [ MISSING LINK : 00h ]
`exclude_from_export` 

                Excludes a node from being exported, when project content is exported. See "Exporting".

Trailing Node IDs

`exclude_from_tree`  

               Excludes a node from being included in a tree. For an example, see Example 2 in "Dynamic Nodes" "Example 2 : Tree". For more on tree, see [ MISSING LINK : 00h ]

User Interface Elements  
The Node Browser

Opening the Node List

Ctrl-Shift-E 






In Sublime Text there is also the alternative of using the UI dropdown. Press Control-Shift-E or select "Urtext: Node List" from the Sublime command palette (Shift-Super-P). Here you can find a node by typing part of its title.

In the Node List, nodes are sorted by their time of creation, with most recent first. They can also be sorted by index (see "`index`").

Traverse ModeTraverse Mode   




This feature is currently implemented in Sublime Text only.

    You can navigate a node tree or list of nodes by turning on Traverse mode (Shift-Ctrl-R). This will open another pane next to the one you are currently in. As you navigate the nodeview in the left side with the cursor or mouse, the selected node shows on the right. Use Sublime's Focus Group navigation keys, or the mouse, to switch between left and right panes.
    
    Toggle Traverse Mode off by pressing Shift-Ctrl-R again. The status bar at the bottom of the Sublime window indicates whether Traverse is on or off. 

    Note that if Traverse mode is off, you can also open a link manually (Shift-Ctrl-/) as normal. 

    This feature is not built into Urtext; it is a feature of the Sublime package only.
Word Wrap in Traverse Mode 

        Since Traverse Mode splits the window into two or more panes, it is suggested to set Word Wrap Column to "Auto" in Sublime Settings. This will cause the edited views to wrap correctly no matter the screen or window/pane size, as well as in Sublime's Distraction Free Mode.

        Whenever Traverse Mode is enabled on a view, word wrap for that view is turned off altogether to prevent awkward wrapping of trees. It is restored when Traverse Mode is turned off.


Remove Indent Guides  

			Formatting plaintext using tab indentions can look messy if indent guides are on. To turn them off, add to your Sublime project settings file:
			%%-JSON
			 "settings" : 
				"draw_indent_guides": false,
			
			%%-END-JSON

Generating a node ID manually 
If you accidentally delete a Node ID or need to insert one arbitrarily, press Urtext-i.

Example Child Node Using a Node Pointer

Dynamically Titled Links  

    Prepending a pipe character to any node link will populate the space between the pipe and link with the node's title, from its metadata or default title. Examples are found throughout this documentation. 

    Titled links are updated at the single file level whenever that file is saved.

In-Progress / Experimental / Wish List
iPhone/iPad/iOS  
	
	Urtext can run on iOS using Pythonista. While it does not provide the elegant UI of Sublime Text, it can be set up to meet the project criteria described in[ MISSING LINK : 008 ] , including the requirement that the content wholly reside on every device and not depend on an internet connection.

	Pythonista can import and manipulate files directly in iCloud Drive. However, iCloud Drive does not always sync folder changes in the background, and/or syncs the file list without syncing full file contents. This makes it necessary to open the iOS Files app in order manually trigger a sync before using the Urtext project. In the event one or more files is missing or different among devices, these differences will propogate to dynamic nodes with wrong, stale, or missing information. When this occurs many times, file version conflicts develop.

	A cleaner solution using Dropbox is possible using the Synchronator module (https://github.com/markhamilton1/Synchronator). This module provides a route to automate explicit bidirectional syncing directly between Dropbox and Pythonista environment on demand, such as whenever the project is being used. The module is complicated to install.
Synchronator Setup   

		DOCUMENTATION COMING
Syncing manually comes with the drawback that changes made on the iOS device will not themselves sync to Dropbox in the background. For instance, if changes are made to a file on iOS while not connected to the internet and Pythonista, the project will have to be explictly synced at a later time. So there remains the possibility that projects will get out of sync.
Import/Export to/from: Markdown, HTML, pure plain text, JSON

Pythonista : Use the "?" Urtext Button. Results will be updated in real time in the view behind th e search field. To exit, tap outside the search field.

Example Source Node 2

Syntax and Format   

      Text between two angled brackets () is parsed as a timestamp.  To insert the current date and time anywhere, press Control-Shift-t: 

      Timestamps are read and written utilizing Python's `strftime` directives. The following formats are included by default:

          %%-PYTHON # (<- for info about this marker see "Pass Markers and Embedded Syntaxes" )
```        # Sat., Sep. 12, 2020, 09:35 AM
          '%a., %b. %d, %Y, %I:%M %p'           
          # September 12, 2020
          '%B %-d, %Y' 
          # September 2020
          '%B %Y'
          # 09-12-2020
          '%m-%d-%Y'
          # Sat., Sep. 12, 2020, 09:35 AM '
          '%a., %b. %d, %Y, %I:%M %p %z' 
          # Sat., Sep. 12, 2020, 09:35 AM'
          '%a., %b. %d, %Y, %I:%M %p'
          # Saturday, September 12, 2020, 09:35 AM'
          '%A, %B %d, %Y, %I:%M %p'
          # 'September 12, 2020, 09:35 AM'
          '%B %d, %Y, %I:%M %p'
          # 'September 12, 2020, 09:35AM'
          '%B %d, %Y, %I:%M%p'
          # 2020
          '%Y'
          # September 12, 2020'
          '%B %d, %Y'
          # Saturday, September 12, 2020, 09:35AM
          '%A, %B %d, %Y, %I:%M%p'
```
      %%-END-PYTHON 

      Additional formats can be added in the "project_settings" node.

Project Naming (Identification) 

Unlike nodes, projects are uniquely identified by name. For this reason, each project must have an unique name within the running instance of Urtext. Projects can be named using the project_title key in the project's project_settings node. If no name is present, the project's name becomes its absolute path in the file system.

Requirements and Features   

        Many of the following features and benefits were core requirements when creating Urtext. Others came about indirectly. Though many can be found in other tools, they are not currently found together in one single existing tool; this was the motivation for creating Urtext.

            - It uses plain text files. Plaintext is fast, human-readable, flexible, cross-platform, device-portable, and future-proof.

            - It is usable across multiple platforms and devices.
 
            - Cascading complexity; use only the parts you need. Does not take months/years to learn.

            - Being open source, Urtext is extensible, hackable and customizable to specific needs.

            - It can compile, organize, and link content spread across hundreds or thousands of files. Files and content elements can be linked to one another in tree-like, recursive (tangled), and other non-hierarchical ways.

            - It has customizable and extensible metadata that does not rely on the file system.

            - It is decoupled from any particular text editor or interface ; it can be incorporated into any environment that runs Python, including any scriptable text editor or Python-scriptable environment capable of displaying a text editing view.
               
            - It can incorporate (embed) other plaintext syntaxes, including other markup languages and other programming language syntaxes.
   
            - There is no need to interact directly with the file system (creating, naming, saving, organizing files). File creation, naming and management is handled for you.
      
            - Future-proof. No reliance on anything that may not exist in 5 or 1000 years. Urtext files themselves are in plaintext, which is future-proof. The interpreter/compiler could be implemented in any sufficiently capable language desired, current, past or future.
   
            - Does not depend on a cloud service. Though cloud services can be used to sync project files among devices, the interpreter itself is made to operate locally; content wholly resides on the device being used.

            Being in plaintext and having a syntax specification, it can also be used with:

            - Themes and syntax highlighting.
            - Version control (Git, for example).

This node will have the value `todo` for the `example` key.  
          {
So will this one  
            {
And this one.    eq5
ep2
6r4

{
This node will have the value `todo` for the `example` key.  
          {
So will this one  
            {
And this one.    eq5
ep2
6r4
**example::todo
         Note that it doesn't matter where in the "parent" node the metadata entry appears. Metadata entries can be placed anywhere in a node, with the same effect.
       
        yoc

Pythonista  

        Use the `/` key when the cursor is on any line containing a link.

Using Urtext in iOS with Pythonista
 
Urtext can be run on iOS devices using Pythonista, which provides a full Python interpreter inside of iOS. It is available in the iOS App Store.

This implementation utilizes the native iOS user interface to create a basic text editor view, along with buttons bound to Urtext's functions (similar to the keyboard shortcut bindings in Sublime), project navigation funtions, and syntax highlighting matching those found in the Sublime Text implementation. Using iCloud, projects can be synced among iOS devices and other devices (desktops, laptops). Once synced, a copy of the project resides fully on the device and is not dependent on a live data connection (see "Requirements and Features").

To set it up:

    - Install Pythonista (http://omz-software.com/pythonista/)

    - Clone or download the Urtext-Pythonista package (https://github.com/nbeversl/urtext_pythonista).

    - Install all the Python dependencies into your Pythonista environment. The requirements are the same as for Sublime Text ("Dependencies and Installation" )

    - (optional) To enabling launching or switching to Urtext using an app icon, use the Shortcuts app.

Example Source Node 4

Reference: Key Bindings

ctrl+shift+;            New Node
ctrl+shift+e            Node Browser 
ctrl+shift+r            Toggle Traverse Mode
ctrl+shift+s.           Auto rename file from node metadata
ctrl+shift+/            Open node (from an ID on the same line) 
ctrl+shift+super+;      New inline node
ctrl+shift+[            New inline node from selection
ctrl+Et                  Insert timestamp
ctrl+shift+]            New dynamic node definition
ctrl+shift+t            Timeline view
ctrl+shift+-            Align selected lines to the right (120 character width)

This node will have the value `todo` for the `example` key.     ucs

id   
            - id: 
    
                (required) : In Sublime this will be auto-populated using the shortcut above; however you can also replace it with the ID of another node. For example, if you want the contents to replace an existing node, assign this key the value of that node's ID. If you want it to populate new inline node, create that node and then copy/paste its ID. 

                Note that in order to work, the target node must exist; dynamic definitions do not create their target nodes. 

                


            
             - include:metadata:[AND:|OR:](metadata key):(metadata value(s)): 
    
                Include nodes with this metadata key and value. Keys and values are chained together and separated by the colon (:) as shown above. Multiple values can be chained together with successive colons. The default operator is "OR"; for "AND", chain this indicator as shown before the tag name.  
                



            - exclude:metadata:(tag name):(tag values) 
    
                Exclude nodes with this metadata key and value. Keys and values are strung together and separated by the colon (:) as shown above. To exclude multiple key/value pairs, write multiple lines. Excluding will always supersede including, no matter the order listed in the definition. 
                


 
           - sort:(key):(reverse)
    
                This specifies how to sort the nodes in the dynamically populated node. The key can be any metadata key in the project, including timestamp. If `:reverse` is appended to the end, the sort order will be reversed.
                



            - metadata:(tag name):(value) 
    
                Metadata to add to the dynamically populated node. This can be any metadata, including the reserved title, index and parent keys.
                


    
                Dynamic nodes will always automatically include the metadata key 'defined in' which will point to the node containing its definition.
    

            - tree:(root id) 
    
                (root id) : Populates the node with a tree with the provided node ID as root. For more on trees, see[ MISSING LINK : 00h ] .
                




             - export:(format):(source id)

                Exports the specified source_id to the target id value in the `id` key field, in the specific format.

                (format) : One of `plaintext`, `markdown` or `html`
                (source_id): The source node to export.

                See "Exporting"

Syntax Highlighting 

		This package comes with a .YML file (`sublime_urtext.sublime_syntax`) defining the Urtext syntax, along with two color schemes that provide syntax highlighting. Syntax highlighting makes everything easier by showing depth of node nesting and dimming certain elements of the syntax. Select the Sixteen (for light) or Monokai (for dark) color schemes in Preferences -> Color Scheme ... 

		Then change to the Urtext syntax by selecting it in View -> Syntax -> Urtext. To avoid having to do this for every file, select View -> Syntax -> Open All with Current Extension As ... -> Urtext. (You can undo this later by repeating the same but selecting Plain Text.)

Example 1 : List    

    Here are four inline nodes with example tags and indexes:
Example Source Node 1
Example Source Node 3
Example Source Node 2
Example Source Node 4
( Note that each of these nodes has the `exclude_from_tree` flag in the metadata, so that they are not included in the Table of Contents. See"`exclude_from_tree`". )

    Here is an example dynamic node definition targeting node ID[ MISSING LINK : 016 ] 

        [ MISSING LINK : 016 ] 

        Here is the compiled node defined by the definition above. Changing the dynamic definition and/or the contents or metadata of the source nodes will update the dynamic node. Saving is necessary to trigger the update.

second level  
            {
third level 
                {
fourth level  
                    {
fifth level     
                    5pq
80d
6qj
8fv

Hiding Tabs	

			If you prefer a clean, terminal-like view, hide tabs: View -> Hide Tabs
			This preference can also be set on a per-(Sublime)-project basis. See the Sublime documentation.
